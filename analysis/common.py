from typing import Optional, Dict, Iterable
import abc
from metrics.common import Timeseries
from utils.tasks import AsyncTask, AsyncExecutionError


class Trend(object):
    """
    Trend represents trend/pattern related data

    Parameters
    ----------
    trend_vals: Dict[object, float]
        dictionary of key for trend (i.e day of the week)
        and value for the key (i.e 10.0)
    """

    def __init__(
        self,
        trend_vals: Dict[object, float]
    ) -> None:
        self._trend_vals = trend_vals

    def get_keys(self) -> Iterable[object]:
        """method to get trend keys"""
        return list(self._trend_vals.keys())

    def get_vals(self) -> Iterable[float]:
        """method to get trend vals"""
        return list(self._trend_vals.values())

    def get_trend_vals(self) -> Dict[object, float]:
        """method to get trend_vals"""
        return self._trend_vals


class Report(object):
    """
    Report contains analysis report generated by a Reporter

    Parameters
    ----------
    forecasts: Optional[Iterable[Timeseries]] (default None)
        list of Timeseries data representing forecasted data
    daily_trend: Optional[Trend] (default None)
        Trend data for day of the week
    hourly_trend: Optional[Trend] (default None)
        Trend data for hour of the day
    """

    def __init__(
        self,
        forecasts: Optional[Iterable[Timeseries]] = None,
        daily_trend: Optional[Trend] = None,
        hourly_trend: Optional[Trend] = None
    ) -> None:
        self._forecasts = forecasts
        self._daily_trend = daily_trend,
        self._hourly_trend = hourly_trend

    def contains_forecasts(self) -> bool:
        """method to check if report contains forecast"""
        return self._forecasts is not None or len(self._forecasts) == 0

    def contains_daily_trends(self) -> bool:
        """method to check if report contains daily trends"""
        return self._daily_trend is not None

    def contains_hourly_trends(self) -> bool:
        """method to check if report contains hourly trends"""
        return self._hourly_trend is not None

    def get_forecasts(self) -> Optional[Iterable[Timeseries]]:
        return self._forecasts

    def get_daily_trends(self) -> Optional[Trend]:
        return self._daily_trend

    def get_hourly_trends(self) -> Optional[Trend]:
        return self._hourly_trend


class Reporter(AsyncTask, metaclass=abc.ABCMeta):
    """
    Reporter runs analaysis on data and generates reports
    """

    async def execute(self) -> Optional[object]:
        """method to execute async task"""
        return await self.report()

    @abc.abstractclassmethod
    async def report(self) -> Optional[Report]:
        """
        method generate report
        """
        pass


class ReporterError(AsyncExecutionError):
    """
    ReporterError is an AsyncExecutionError that is thrown
    when unable to generate report

    Parameters
    ----------
    reporter: str
        name of the reporter
    error: str
        an error message indicating the issue that occured
    """

    def __init__(
        self,
        reporter,
        error: str
    ) -> None:
        msg = f"ReporterError -> {error} | Reporter: {reporter}"
        self.message = msg
        super().__init__(self.message)
